#compdef squashmount
local curcontext="$curcontext" state state_descr line
typeset -A opt_args
_arguments -C -s -S -A '-*' : \
'(* -)'{'--help','-h'}'[print a brief help]' \
'(* -)'{'--man','-\\?'}'[show extended help as a manpage]' \
'(* -)'{'--version','-V'}'[print version and exit]' \
'*'{'-v','--verbose'}'[be more verbose (accumulative)]' \
'*'{'-q','--quiet'}'[be more quiet (accumulative)]' \
{'*-c+','*--config='}'[CONFIGFILE (add CONFIGFILE to list)]:configfile:_files' \
'--rundir=[DIR (runtime config dir /run/squash_dir)]:runtime config dir:_files -/' \
'(--squash --no-squash --nosquash -s -n '{'--threshold)-t+','-t)--threshold='}'[THRESHOLD (set threshold size)]:threshold size:(0 1m 10m 20m 30m 40m 500k 600k 700k 800k 900k "")' \
'(--threshold --no-squash --nosquash -t -n '{'--squash)-s','-s)--squash'}'[do resquash\: -t 0]' \
'(--threshold --squash -t -s '{'--no-squash --nosquash)-n','--nosquash -n)--no-squash','--no-squash -n)--nosquash'}'[no resquash\: -t -1]' \
{'(--separator)-S+','(-S)--separator='}'[SEP (separator for print-...)]:separator' \
'--squash-verbose=[LEVEL (verbosity of mksquash)]:verbosity:(0 1 2)' \
'--pass-directory[Args are paths]' \
{'(--interactive)-i','(-i)--interactive'}'[ask before cleaning directory]' \
'(--no-kill --nokill -K '{'--kill)-k','-k)--kill'}'[clean without resquashing]' \
'(--kill -k '{'--nokill --no-kill)-K','--nokill -K)--no-kill','--no-kill -K)--nokill'}'[Remove effect of --kill]' \
{'(--force)-f','(-f)--force'}'[force remount, create, or forget]' \
{'(--reset)-r','(-r)--reset'}'[reset after umounting]' \
'(--no-lazy --nolazy)--lazy[lazy umount after failure]' \
'(--lazy '{'--nolazy)--no-lazy','--no-lazy)--nolazy'}'[no lazy umount after failure]' \
'(--no-error -noerror -E '{'-e)--error','(--error)-e'}'[break on error]' \
'(--error -e '{'--no-error --noerror)-E','--noerror -E)--no-error','--no-error -E)--noerror'}'[no break on error]' \
{'*--title=','*-T+'}'[Set title option OPT]:title option:_title_opt' \
'1:command:->cmds' \
'*:mask:->mask'
local ret=$?
case $state in
(cmds)
	local cmds
	cmds=(
	'help:print a brief help'
	'man:show extended help as a manpage'
	'mount:mount'
	'start:mount, creating squashfile first if necessary'
	'umount:umount, squashing/cleaning if necessary'
	'stop:umount and forget'
	'forget:forget all information in /run/squashdir'
	'remount:remount, squashing/cleaning if necessary'
	'restart:stop and start'
	'set:modify state in /run/squashdir'
	'reset:restore state in /run/squashdir'
	{'status','list'}':output infos; depending on -v -vv'
	'print-tag:print tag'
	'print-dir:print DIR directory'
	'print-readonly:print READONLY directory or 1'
	'print-changes:print CHANGES directory'
	'print-file:print squash-file path'
	'print-type:print mount type'
	'print-new:print 1 if there is new data'
	'print-will-squash:print 1 if data is resquashed'
	'print-threshold:print active threshold value'
	'print-kill:print 1 is --kill is active'
	)
	_describe -t commands 'command' cmds
	ret=$?;;
(mask)
	local expl
	if [[ -z ${opt_args[--pass-directory]++} ]]
	then	_tags masks
		_requested masks && {
			local masks
			masks=(${(f)"$(_call_program print-masks 'squashmount print-tag 2>/dev/null')"})
			_description masks expl 'mask'
			compadd "$expl[@]" - $masks
			ret=?
		}
	else	local paths
		paths=(${(f)"$(_call_program print-dirs 'squashmount print-dir 2>/dev/null')"})
		_canonical_paths -A paths directories 'mount point'
		ret=$?
	fi;;
esac
return ret
